/*
 * ReloadlySdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.reloadly.auth;

import com.reloadly.auth.controllers.AirtimeAccountBalanceController;
import com.reloadly.auth.controllers.AirtimeCommissionsController;
import com.reloadly.auth.controllers.AirtimeCountriesController;
import com.reloadly.auth.controllers.AirtimeFXRatesController;
import com.reloadly.auth.controllers.AirtimeNumberLookupController;
import com.reloadly.auth.controllers.AirtimeOperatorsController;
import com.reloadly.auth.controllers.AirtimePromotionsController;
import com.reloadly.auth.controllers.AirtimeTopupsController;
import com.reloadly.auth.controllers.AirtimeTransactionsController;
import com.reloadly.auth.controllers.AuthenticationController;
import com.reloadly.auth.controllers.GiftCardsAccountBalanceController;
import com.reloadly.auth.controllers.GiftCardsCountriesController;
import com.reloadly.auth.controllers.GiftCardsDiscountsController;
import com.reloadly.auth.controllers.GiftCardsOrdersController;
import com.reloadly.auth.controllers.GiftCardsProductsController;
import com.reloadly.auth.controllers.GiftCardsRedeemInstructionsController;
import com.reloadly.auth.controllers.GiftCardsTransactionsController;
import com.reloadly.auth.controllers.UtilityPaymentsAccountBalanceController;
import com.reloadly.auth.controllers.UtilityPaymentsPayBillController;
import com.reloadly.auth.controllers.UtilityPaymentsTransactionsController;
import com.reloadly.auth.controllers.UtilityPaymentsUtilityBillersController;
import com.reloadly.auth.http.client.HttpClient;
import com.reloadly.auth.http.client.HttpClientConfiguration;
import com.reloadly.auth.http.client.OkClient;
import com.reloadly.auth.http.client.ReadonlyHttpClientConfiguration;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;

/**
 * Gateway class for the library.
 * This class acts as a factory for Controllers.
 * It holds the state of the SDK.
 */
public final class ReloadlySdkClient implements Configuration {

    /**
     * Private store for controllers.
     */
    private AuthenticationController authentication;
    private AirtimeAccountBalanceController airtimeAccountBalance;
    private AirtimeCountriesController airtimeCountries;
    private AirtimeOperatorsController airtimeOperators;
    private AirtimeFXRatesController airtimeFXRates;
    private AirtimeCommissionsController airtimeCommissions;
    private AirtimePromotionsController airtimePromotions;
    private AirtimeTopupsController airtimeTopups;
    private AirtimeTransactionsController airtimeTransactions;
    private GiftCardsAccountBalanceController giftCardsAccountBalance;
    private GiftCardsCountriesController giftCardsCountries;
    private GiftCardsProductsController giftCardsProducts;
    private GiftCardsRedeemInstructionsController giftCardsRedeemInstructions;
    private GiftCardsDiscountsController giftCardsDiscounts;
    private GiftCardsTransactionsController giftCardsTransactions;
    private GiftCardsOrdersController giftCardsOrders;
    private AirtimeNumberLookupController airtimeNumberLookup;
    private UtilityPaymentsAccountBalanceController utilityPaymentsAccountBalance;
    private UtilityPaymentsUtilityBillersController utilityPaymentsUtilityBillers;
    private UtilityPaymentsPayBillController utilityPaymentsPayBill;
    private UtilityPaymentsTransactionsController utilityPaymentsTransactions;

    /**
     * Current API environment.
     */
    private final Environment environment;

    /**
     * The HTTP Client instance to use for making HTTP requests.
     */
    private final HttpClient httpClient;

    /**
     * Http Client Configuration instance.
     */
    private final ReadonlyHttpClientConfiguration httpClientConfig;

    /**
     * Map of authentication Managers.
     */
    private Map<String, AuthManager> authManagers;

    private ReloadlySdkClient(Environment environment, HttpClient httpClient,
            ReadonlyHttpClientConfiguration httpClientConfig,
            Map<String, AuthManager> authManagers) {
        this.environment = environment;
        this.httpClient = httpClient;
        this.httpClientConfig = httpClientConfig;

        this.authManagers = (authManagers == null) ? new HashMap<>() : new HashMap<>(authManagers);


        authentication = new AuthenticationController(this, this.httpClient, this.authManagers);
        airtimeAccountBalance = new AirtimeAccountBalanceController(this, this.httpClient,
                this.authManagers);
        airtimeCountries = new AirtimeCountriesController(this, this.httpClient, this.authManagers);
        airtimeOperators = new AirtimeOperatorsController(this, this.httpClient, this.authManagers);
        airtimeFXRates = new AirtimeFXRatesController(this, this.httpClient, this.authManagers);
        airtimeCommissions = new AirtimeCommissionsController(this, this.httpClient,
                this.authManagers);
        airtimePromotions = new AirtimePromotionsController(this, this.httpClient,
                this.authManagers);
        airtimeTopups = new AirtimeTopupsController(this, this.httpClient, this.authManagers);
        airtimeTransactions = new AirtimeTransactionsController(this, this.httpClient,
                this.authManagers);
        giftCardsAccountBalance = new GiftCardsAccountBalanceController(this, this.httpClient,
                this.authManagers);
        giftCardsCountries = new GiftCardsCountriesController(this, this.httpClient,
                this.authManagers);
        giftCardsProducts = new GiftCardsProductsController(this, this.httpClient,
                this.authManagers);
        giftCardsRedeemInstructions = new GiftCardsRedeemInstructionsController(this,
                this.httpClient, this.authManagers);
        giftCardsDiscounts = new GiftCardsDiscountsController(this, this.httpClient,
                this.authManagers);
        giftCardsTransactions = new GiftCardsTransactionsController(this, this.httpClient,
                this.authManagers);
        giftCardsOrders = new GiftCardsOrdersController(this, this.httpClient, this.authManagers);
        airtimeNumberLookup = new AirtimeNumberLookupController(this, this.httpClient,
                this.authManagers);
        utilityPaymentsAccountBalance = new UtilityPaymentsAccountBalanceController(this,
                this.httpClient, this.authManagers);
        utilityPaymentsUtilityBillers = new UtilityPaymentsUtilityBillersController(this,
                this.httpClient, this.authManagers);
        utilityPaymentsPayBill = new UtilityPaymentsPayBillController(this, this.httpClient,
                this.authManagers);
        utilityPaymentsTransactions = new UtilityPaymentsTransactionsController(this,
                this.httpClient, this.authManagers);
    }

    /**
     * Shutdown the underlying HttpClient instance.
     */
    public static void shutdown() {
        OkClient.shutdown();
    }

    /**
     * Get the instance of AuthenticationController.
     * @return authentication
     */
    public AuthenticationController getAuthenticationController() {
        return authentication;
    }

    /**
     * Get the instance of AirtimeAccountBalanceController.
     * @return airtimeAccountBalance
     */
    public AirtimeAccountBalanceController getAirtimeAccountBalanceController() {
        return airtimeAccountBalance;
    }

    /**
     * Get the instance of AirtimeCountriesController.
     * @return airtimeCountries
     */
    public AirtimeCountriesController getAirtimeCountriesController() {
        return airtimeCountries;
    }

    /**
     * Get the instance of AirtimeOperatorsController.
     * @return airtimeOperators
     */
    public AirtimeOperatorsController getAirtimeOperatorsController() {
        return airtimeOperators;
    }

    /**
     * Get the instance of AirtimeFXRatesController.
     * @return airtimeFXRates
     */
    public AirtimeFXRatesController getAirtimeFXRatesController() {
        return airtimeFXRates;
    }

    /**
     * Get the instance of AirtimeCommissionsController.
     * @return airtimeCommissions
     */
    public AirtimeCommissionsController getAirtimeCommissionsController() {
        return airtimeCommissions;
    }

    /**
     * Get the instance of AirtimePromotionsController.
     * @return airtimePromotions
     */
    public AirtimePromotionsController getAirtimePromotionsController() {
        return airtimePromotions;
    }

    /**
     * Get the instance of AirtimeTopupsController.
     * @return airtimeTopups
     */
    public AirtimeTopupsController getAirtimeTopupsController() {
        return airtimeTopups;
    }

    /**
     * Get the instance of AirtimeTransactionsController.
     * @return airtimeTransactions
     */
    public AirtimeTransactionsController getAirtimeTransactionsController() {
        return airtimeTransactions;
    }

    /**
     * Get the instance of GiftCardsAccountBalanceController.
     * @return giftCardsAccountBalance
     */
    public GiftCardsAccountBalanceController getGiftCardsAccountBalanceController() {
        return giftCardsAccountBalance;
    }

    /**
     * Get the instance of GiftCardsCountriesController.
     * @return giftCardsCountries
     */
    public GiftCardsCountriesController getGiftCardsCountriesController() {
        return giftCardsCountries;
    }

    /**
     * Get the instance of GiftCardsProductsController.
     * @return giftCardsProducts
     */
    public GiftCardsProductsController getGiftCardsProductsController() {
        return giftCardsProducts;
    }

    /**
     * Get the instance of GiftCardsRedeemInstructionsController.
     * @return giftCardsRedeemInstructions
     */
    public GiftCardsRedeemInstructionsController getGiftCardsRedeemInstructionsController() {
        return giftCardsRedeemInstructions;
    }

    /**
     * Get the instance of GiftCardsDiscountsController.
     * @return giftCardsDiscounts
     */
    public GiftCardsDiscountsController getGiftCardsDiscountsController() {
        return giftCardsDiscounts;
    }

    /**
     * Get the instance of GiftCardsTransactionsController.
     * @return giftCardsTransactions
     */
    public GiftCardsTransactionsController getGiftCardsTransactionsController() {
        return giftCardsTransactions;
    }

    /**
     * Get the instance of GiftCardsOrdersController.
     * @return giftCardsOrders
     */
    public GiftCardsOrdersController getGiftCardsOrdersController() {
        return giftCardsOrders;
    }

    /**
     * Get the instance of AirtimeNumberLookupController.
     * @return airtimeNumberLookup
     */
    public AirtimeNumberLookupController getAirtimeNumberLookupController() {
        return airtimeNumberLookup;
    }

    /**
     * Get the instance of UtilityPaymentsAccountBalanceController.
     * @return utilityPaymentsAccountBalance
     */
    public UtilityPaymentsAccountBalanceController getUtilityPaymentsAccountBalanceController() {
        return utilityPaymentsAccountBalance;
    }

    /**
     * Get the instance of UtilityPaymentsUtilityBillersController.
     * @return utilityPaymentsUtilityBillers
     */
    public UtilityPaymentsUtilityBillersController getUtilityPaymentsUtilityBillersController() {
        return utilityPaymentsUtilityBillers;
    }

    /**
     * Get the instance of UtilityPaymentsPayBillController.
     * @return utilityPaymentsPayBill
     */
    public UtilityPaymentsPayBillController getUtilityPaymentsPayBillController() {
        return utilityPaymentsPayBill;
    }

    /**
     * Get the instance of UtilityPaymentsTransactionsController.
     * @return utilityPaymentsTransactions
     */
    public UtilityPaymentsTransactionsController getUtilityPaymentsTransactionsController() {
        return utilityPaymentsTransactions;
    }

    /**
     * Current API environment.
     * @return environment
     */
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * The HTTP Client instance to use for making HTTP requests.
     * @return httpClient
     */
    private HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Http Client Configuration instance.
     * @return httpClientConfig
     */
    public ReadonlyHttpClientConfiguration getHttpClientConfig() {
        return httpClientConfig;
    }

    /**
     * The timeout to use for making HTTP requests.
     * @deprecated This method will be removed in a future version. Use
     *             {@link #getHttpClientConfig()} instead.
     *
     * @return timeout
     */
    @Deprecated
    public long timeout() {
        return httpClientConfig.getTimeout();
    }

    /**
     * Get base URI by current environment.
     * @param server Server for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(Server server) {
        Map<String, SimpleEntry<Object, Boolean>> parameters = new HashMap<>();
        StringBuilder baseUrl = new StringBuilder(environmentMapper(environment, server));
        ApiHelper.appendUrlWithTemplateParameters(baseUrl, parameters);
        return baseUrl.toString();
    }

    /**
     * Get base URI by current environment.
     * @return Processed base URI
     */
    public String getBaseUri() {
        return getBaseUri(Server.AUTHENTICATION);
    }

    /**
     * Base URLs by environment and server aliases.
     * @param environment Environment for which to get the base URI
     * @param server Server for which to get the base URI
     * @return base URL
     */
    private static String environmentMapper(Environment environment, Server server) {
        if (environment.equals(Environment.PRODUCTION)) {
            if (server.equals(Server.AUTHENTICATION)) {
                return "https://auth.reloadly.com/oauth";
            }
            if (server.equals(Server.GIFT_CARDS)) {
                return "https://giftcards.reloadly.com";
            }
            if (server.equals(Server.UTILITY_PAYMENTS)) {
                return "https://utilities.reloadly.com";
            }
            if (server.equals(Server.AIRTIME)) {
                return "https://topups.reloadly.com";
            }
        }
        return "https://auth.reloadly.com/oauth";
    }

    /**
     * Converts this ReloadlySdkClient into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ReloadlySdkClient [" + "environment=" + environment + ", httpClientConfig="
                + httpClientConfig + ", authManagers=" + authManagers + "]";
    }

    /**
     * Builds a new {@link ReloadlySdkClient.Builder} object.
     * Creates the instance with the state of the current client.
     * @return a new {@link ReloadlySdkClient.Builder} object
     */
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.environment = getEnvironment();
        builder.httpClient = getHttpClient();
        builder.authManagers = authManagers;
        builder.httpClientConfig(configBldr -> configBldr =
                ((HttpClientConfiguration) httpClientConfig).newBuilder());
        return builder;
    }

    /**
     * Class to build instances of {@link ReloadlySdkClient}.
     */
    public static class Builder {

        private Environment environment = Environment.PRODUCTION;
        private HttpClient httpClient;
        private Map<String, AuthManager> authManagers = null;
        private HttpClientConfiguration.Builder httpClientConfigBuilder =
                new HttpClientConfiguration.Builder();


        /**
         * Current API environment.
         * @param environment The environment for client.
         * @return Builder
         */
        public Builder environment(Environment environment) {
            this.environment = environment;
            return this;
        }

        /**
         * The timeout to use for making HTTP requests.
         * @deprecated This method will be removed in a future version. Use
         *             {@link #httpClientConfig(Consumer) httpClientConfig} instead.
         * @param timeout must be greater then 0.
         * @return Builder
         */
        @Deprecated
        public Builder timeout(long timeout) {
            this.httpClientConfigBuilder.timeout(timeout);
            return this;
        }

        /**
         * Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param action Consumer for the builder of httpClientConfiguration.
         * @return Builder
         */
        public Builder httpClientConfig(Consumer<HttpClientConfiguration.Builder> action) {
            action.accept(httpClientConfigBuilder);
            return this;
        }

        /**
         * Builds a new ReloadlySdkClient object using the set fields.
         * @return ReloadlySdkClient
         */
        public ReloadlySdkClient build() {
            HttpClientConfiguration httpClientConfig = httpClientConfigBuilder.build();
            httpClient = new OkClient(httpClientConfig);

            return new ReloadlySdkClient(environment, httpClient, httpClientConfig, authManagers);
        }
    }
}