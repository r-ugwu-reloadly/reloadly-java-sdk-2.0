/*
 * ReloadlySdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.reloadly.auth.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.reloadly.auth.ApiHelper;
import com.reloadly.auth.AuthManager;
import com.reloadly.auth.Configuration;
import com.reloadly.auth.Server;
import com.reloadly.auth.exceptions.ApiException;
import com.reloadly.auth.http.Headers;
import com.reloadly.auth.http.client.HttpClient;
import com.reloadly.auth.http.client.HttpContext;
import com.reloadly.auth.http.request.HttpRequest;
import com.reloadly.auth.http.response.HttpResponse;
import com.reloadly.auth.http.response.HttpStringResponse;
import com.reloadly.auth.models.DynamicResponse;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class AirtimeNumberLookupController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public AirtimeNumberLookupController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  phone  Required parameter: This is the mobile number whose details are to be
     *         retrieved.
     * @param  countrycode  Required parameter: This is the ISO code of the country where the mobile
     *         number is registered.
     * @param  suggestedAmountsMap  Optional parameter: Indicates if this field should be returned
     *         as a response. Default value is false.
     * @param  suggestedAmounts  Optional parameter: Indicates if this field should be returned as a
     *         response. Default value is false.
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse reloadlyNumberLookupGet(
            final String accept,
            final String authorization,
            final int phone,
            final String countrycode,
            final String suggestedAmountsMap,
            final String suggestedAmounts) throws ApiException, IOException {
        HttpRequest request = buildReloadlyNumberLookupGetRequest(accept, authorization, phone,
                countrycode, suggestedAmountsMap, suggestedAmounts);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleReloadlyNumberLookupGetResponse(context);
    }

    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  phone  Required parameter: This is the mobile number whose details are to be
     *         retrieved.
     * @param  countrycode  Required parameter: This is the ISO code of the country where the mobile
     *         number is registered.
     * @param  suggestedAmountsMap  Optional parameter: Indicates if this field should be returned
     *         as a response. Default value is false.
     * @param  suggestedAmounts  Optional parameter: Indicates if this field should be returned as a
     *         response. Default value is false.
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> reloadlyNumberLookupGetAsync(
            final String accept,
            final String authorization,
            final int phone,
            final String countrycode,
            final String suggestedAmountsMap,
            final String suggestedAmounts) {
        return makeHttpCallAsync(() -> buildReloadlyNumberLookupGetRequest(accept, authorization,
                phone, countrycode, suggestedAmountsMap, suggestedAmounts),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleReloadlyNumberLookupGetResponse(context));
    }

    /**
     * Builds the HttpRequest object for reloadlyNumberLookupGet.
     */
    private HttpRequest buildReloadlyNumberLookupGetRequest(
            final String accept,
            final String authorization,
            final int phone,
            final String countrycode,
            final String suggestedAmountsMap,
            final String suggestedAmounts) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.AIRTIME);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/operators/mnp-lookup/phone/{phone}/countries/{countrycode}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("phone",
                new SimpleEntry<Object, Boolean>(phone, true));
        templateParameters.put("countrycode",
                new SimpleEntry<Object, Boolean>(countrycode, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("suggestedAmountsMap", suggestedAmountsMap);
        queryParameters.put("suggestedAmounts", suggestedAmounts);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("Authorization", authorization);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for reloadlyNumberLookupGet.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleReloadlyNumberLookupGetResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Full authentication is required to access this resource",
                    context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  contentType  Required parameter: Example:
     * @param  body  Required parameter: Request Payload
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse reloadlyNumberLookupPost(
            final String accept,
            final String authorization,
            final String contentType,
            final Object body) throws ApiException, IOException {
        HttpRequest request = buildReloadlyNumberLookupPostRequest(accept, authorization,
                contentType, body);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleReloadlyNumberLookupPostResponse(context);
    }

    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  contentType  Required parameter: Example:
     * @param  body  Required parameter: Request Payload
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> reloadlyNumberLookupPostAsync(
            final String accept,
            final String authorization,
            final String contentType,
            final Object body) {
        return makeHttpCallAsync(() -> buildReloadlyNumberLookupPostRequest(accept, authorization,
                contentType, body),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleReloadlyNumberLookupPostResponse(context));
    }

    /**
     * Builds the HttpRequest object for reloadlyNumberLookupPost.
     */
    private HttpRequest buildReloadlyNumberLookupPostRequest(
            final String accept,
            final String authorization,
            final String contentType,
            final Object body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.AIRTIME);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/mnp-lookup/operators");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("Authorization", authorization);
        headers.add("Content-Type", contentType);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        return request;
    }

    /**
     * Processes the response for reloadlyNumberLookupPost.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleReloadlyNumberLookupPostResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Full authentication is required to access this resource",
                    context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

}