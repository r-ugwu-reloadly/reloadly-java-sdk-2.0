/*
 * ReloadlySdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.reloadly.auth.controllers;

import com.reloadly.auth.ApiHelper;
import com.reloadly.auth.AuthManager;
import com.reloadly.auth.Configuration;
import com.reloadly.auth.Server;
import com.reloadly.auth.exceptions.ApiException;
import com.reloadly.auth.http.Headers;
import com.reloadly.auth.http.client.HttpClient;
import com.reloadly.auth.http.client.HttpContext;
import com.reloadly.auth.http.request.HttpRequest;
import com.reloadly.auth.http.response.HttpResponse;
import com.reloadly.auth.http.response.HttpStringResponse;
import com.reloadly.auth.models.DynamicResponse;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class AirtimeTransactionsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public AirtimeTransactionsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  size  Optional parameter: This indicates the number of transactions to be retrieved
     *         on a page. Default value is 200.
     * @param  page  Optional parameter: This indicates the page of the transactions list being
     *         retrieved. Default value is 1.
     * @param  countrycode  Optional parameter: Indicates the ISO code of the country assigned to
     *         the top-up's receiver at the time the top-up transaction was made.
     * @param  operatorid  Optional parameter: Indicates the operator identification number assigned
     *         to the top-up transaction at the time it was made.
     * @param  operatorName  Optional parameter: Indicates the operator name assigned to the top-up
     *         transaction at the time it was made.
     * @param  customIdentifier  Optional parameter: Indicates the unique reference assigned to the
     *         top-up transaction at the time it was made.
     * @param  startDate  Optional parameter: Indicates the beginning of the timeframe range for the
     *         transactions to be retrieved.
     * @param  endDate  Optional parameter: String Indicates the end of the timeframe range for the
     *         transactions to be retrieved.
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse reloadlyAirtimeTransactions(
            final String accept,
            final String authorization,
            final Integer size,
            final Integer page,
            final Integer countrycode,
            final String operatorid,
            final String operatorName,
            final String customIdentifier,
            final String startDate,
            final String endDate) throws ApiException, IOException {
        HttpRequest request = buildReloadlyAirtimeTransactionsRequest(accept, authorization, size,
                page, countrycode, operatorid, operatorName, customIdentifier, startDate, endDate);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleReloadlyAirtimeTransactionsResponse(context);
    }

    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  size  Optional parameter: This indicates the number of transactions to be retrieved
     *         on a page. Default value is 200.
     * @param  page  Optional parameter: This indicates the page of the transactions list being
     *         retrieved. Default value is 1.
     * @param  countrycode  Optional parameter: Indicates the ISO code of the country assigned to
     *         the top-up's receiver at the time the top-up transaction was made.
     * @param  operatorid  Optional parameter: Indicates the operator identification number assigned
     *         to the top-up transaction at the time it was made.
     * @param  operatorName  Optional parameter: Indicates the operator name assigned to the top-up
     *         transaction at the time it was made.
     * @param  customIdentifier  Optional parameter: Indicates the unique reference assigned to the
     *         top-up transaction at the time it was made.
     * @param  startDate  Optional parameter: Indicates the beginning of the timeframe range for the
     *         transactions to be retrieved.
     * @param  endDate  Optional parameter: String Indicates the end of the timeframe range for the
     *         transactions to be retrieved.
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> reloadlyAirtimeTransactionsAsync(
            final String accept,
            final String authorization,
            final Integer size,
            final Integer page,
            final Integer countrycode,
            final String operatorid,
            final String operatorName,
            final String customIdentifier,
            final String startDate,
            final String endDate) {
        return makeHttpCallAsync(() -> buildReloadlyAirtimeTransactionsRequest(accept,
                authorization, size, page, countrycode, operatorid, operatorName, customIdentifier,
                startDate, endDate),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleReloadlyAirtimeTransactionsResponse(context));
    }

    /**
     * Builds the HttpRequest object for reloadlyAirtimeTransactions.
     */
    private HttpRequest buildReloadlyAirtimeTransactionsRequest(
            final String accept,
            final String authorization,
            final Integer size,
            final Integer page,
            final Integer countrycode,
            final String operatorid,
            final String operatorName,
            final String customIdentifier,
            final String startDate,
            final String endDate) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.AIRTIME);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/topups/reports/transactions");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("size", size);
        queryParameters.put("page", page);
        queryParameters.put("countrycode", countrycode);
        queryParameters.put("operatorid", operatorid);
        queryParameters.put("operatorName", operatorName);
        queryParameters.put("customIdentifier", customIdentifier);
        queryParameters.put("startDate", startDate);
        queryParameters.put("endDate", endDate);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("Authorization", authorization);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for reloadlyAirtimeTransactions.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleReloadlyAirtimeTransactionsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Full authentication is required to access this resource",
                    context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  transactionid  Required parameter: This indicates the identification number of the
     *         transaction to be retrieved.
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse reloadlyAirtimeTransactionById(
            final String accept,
            final String authorization,
            final int transactionid) throws ApiException, IOException {
        HttpRequest request = buildReloadlyAirtimeTransactionByIdRequest(accept, authorization,
                transactionid);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleReloadlyAirtimeTransactionByIdResponse(context);
    }

    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  transactionid  Required parameter: This indicates the identification number of the
     *         transaction to be retrieved.
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> reloadlyAirtimeTransactionByIdAsync(
            final String accept,
            final String authorization,
            final int transactionid) {
        return makeHttpCallAsync(() -> buildReloadlyAirtimeTransactionByIdRequest(accept,
                authorization, transactionid),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleReloadlyAirtimeTransactionByIdResponse(context));
    }

    /**
     * Builds the HttpRequest object for reloadlyAirtimeTransactionById.
     */
    private HttpRequest buildReloadlyAirtimeTransactionByIdRequest(
            final String accept,
            final String authorization,
            final int transactionid) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.AIRTIME);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/topups/reports/transactions/{transactionid}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("transactionid",
                new SimpleEntry<Object, Boolean>(transactionid, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("Authorization", authorization);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for reloadlyAirtimeTransactionById.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleReloadlyAirtimeTransactionByIdResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Full authentication is required to access this resource",
                    context);
        }
        if (responseCode == 404) {
            throw new ApiException("Airtime transaction not found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

}