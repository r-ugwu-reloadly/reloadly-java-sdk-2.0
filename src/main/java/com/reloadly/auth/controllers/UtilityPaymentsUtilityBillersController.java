/*
 * ReloadlySdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.reloadly.auth.controllers;

import com.reloadly.auth.ApiHelper;
import com.reloadly.auth.AuthManager;
import com.reloadly.auth.Configuration;
import com.reloadly.auth.Server;
import com.reloadly.auth.exceptions.ApiException;
import com.reloadly.auth.http.Headers;
import com.reloadly.auth.http.client.HttpClient;
import com.reloadly.auth.http.client.HttpContext;
import com.reloadly.auth.http.request.HttpRequest;
import com.reloadly.auth.http.response.HttpResponse;
import com.reloadly.auth.http.response.HttpStringResponse;
import com.reloadly.auth.models.DynamicResponse;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class UtilityPaymentsUtilityBillersController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public UtilityPaymentsUtilityBillersController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  id  Optional parameter: This is the unique identification number of each biller. It
     *         uniquely identifies the biller servicing the utility.
     * @param  name  Optional parameter: This indicates the biller's name. In situations where the
     *         biller's name is exceptionally long, partial names are used.
     * @param  type  Optional parameter: This indicates the type of utility payment handled by the
     *         biller. Values included are ELECTRICITY_BILL_PAYMENT, WATER_BILL_PAYMENT,
     *         TV_BILL_PAYMENT and INTERNET_BILL_PAYMENT.
     * @param  serviceType  Optional parameter: This indicates the payment service type being
     *         rendered by the utility biller service. Examples are PREPAID and POSTPAID.
     * @param  countryISOCode  Optional parameter: This indicates the ISO code of the country where
     *         the utility biller is operating in.
     * @param  page  Optional parameter: This indicates the page of the billers list being
     *         retrieved. Default value is 1.
     * @param  size  Optional parameter: This indicates the number of billers to be retrieved on a
     *         page. Default value is 200.
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse reloadlyUtilityPaymentsBillers(
            final String accept,
            final String authorization,
            final Integer id,
            final String name,
            final String type,
            final String serviceType,
            final String countryISOCode,
            final Integer page,
            final Integer size) throws ApiException, IOException {
        HttpRequest request = buildReloadlyUtilityPaymentsBillersRequest(accept, authorization, id,
                name, type, serviceType, countryISOCode, page, size);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleReloadlyUtilityPaymentsBillersResponse(context);
    }

    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  id  Optional parameter: This is the unique identification number of each biller. It
     *         uniquely identifies the biller servicing the utility.
     * @param  name  Optional parameter: This indicates the biller's name. In situations where the
     *         biller's name is exceptionally long, partial names are used.
     * @param  type  Optional parameter: This indicates the type of utility payment handled by the
     *         biller. Values included are ELECTRICITY_BILL_PAYMENT, WATER_BILL_PAYMENT,
     *         TV_BILL_PAYMENT and INTERNET_BILL_PAYMENT.
     * @param  serviceType  Optional parameter: This indicates the payment service type being
     *         rendered by the utility biller service. Examples are PREPAID and POSTPAID.
     * @param  countryISOCode  Optional parameter: This indicates the ISO code of the country where
     *         the utility biller is operating in.
     * @param  page  Optional parameter: This indicates the page of the billers list being
     *         retrieved. Default value is 1.
     * @param  size  Optional parameter: This indicates the number of billers to be retrieved on a
     *         page. Default value is 200.
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> reloadlyUtilityPaymentsBillersAsync(
            final String accept,
            final String authorization,
            final Integer id,
            final String name,
            final String type,
            final String serviceType,
            final String countryISOCode,
            final Integer page,
            final Integer size) {
        return makeHttpCallAsync(() -> buildReloadlyUtilityPaymentsBillersRequest(accept,
                authorization, id, name, type, serviceType, countryISOCode, page, size),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleReloadlyUtilityPaymentsBillersResponse(context));
    }

    /**
     * Builds the HttpRequest object for reloadlyUtilityPaymentsBillers.
     */
    private HttpRequest buildReloadlyUtilityPaymentsBillersRequest(
            final String accept,
            final String authorization,
            final Integer id,
            final String name,
            final String type,
            final String serviceType,
            final String countryISOCode,
            final Integer page,
            final Integer size) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.UTILITY_PAYMENTS);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/billers");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("id", id);
        queryParameters.put("name", name);
        queryParameters.put("type", type);
        queryParameters.put("serviceType", serviceType);
        queryParameters.put("countryISOCode", countryISOCode);
        queryParameters.put("page", page);
        queryParameters.put("size", size);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("Authorization", authorization);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for reloadlyUtilityPaymentsBillers.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleReloadlyUtilityPaymentsBillersResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Full authentication is required to access this resource",
                    context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

}