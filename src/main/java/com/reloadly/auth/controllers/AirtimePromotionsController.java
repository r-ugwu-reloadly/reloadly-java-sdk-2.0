/*
 * ReloadlySdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.reloadly.auth.controllers;

import com.reloadly.auth.ApiHelper;
import com.reloadly.auth.AuthManager;
import com.reloadly.auth.Configuration;
import com.reloadly.auth.Server;
import com.reloadly.auth.exceptions.ApiException;
import com.reloadly.auth.http.Headers;
import com.reloadly.auth.http.client.HttpClient;
import com.reloadly.auth.http.client.HttpContext;
import com.reloadly.auth.http.request.HttpRequest;
import com.reloadly.auth.http.response.HttpResponse;
import com.reloadly.auth.http.response.HttpStringResponse;
import com.reloadly.auth.models.DynamicResponse;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class AirtimePromotionsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public AirtimePromotionsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  size  Optional parameter: This indicates the number of promotions to be retrieved on
     *         a page. Default value is 200.
     * @param  page  Optional parameter: This indicates the page of the promotions list being
     *         retrieved. Default value is 1.
     * @param  languageCode  Optional parameter: This indicates the language you want the promotion
     *         information to be displayed in. The language code is to be specified in the ISO 639-1
     *         format. Choices are 'EN', 'ES', 'FR', 'IT', 'PT', 'ZH', 'AR', 'HI', 'HT', 'JA' and
     *         'DE'. Default is 'EN'. This is a case-insensitive field. The promotion information is
     *         returned in your requested language irrespective of the original language in which
     *         the promotion was launched.
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse reloadlyAirtimePromotions(
            final String accept,
            final String authorization,
            final Integer size,
            final Integer page,
            final Integer languageCode) throws ApiException, IOException {
        HttpRequest request = buildReloadlyAirtimePromotionsRequest(accept, authorization, size,
                page, languageCode);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleReloadlyAirtimePromotionsResponse(context);
    }

    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  size  Optional parameter: This indicates the number of promotions to be retrieved on
     *         a page. Default value is 200.
     * @param  page  Optional parameter: This indicates the page of the promotions list being
     *         retrieved. Default value is 1.
     * @param  languageCode  Optional parameter: This indicates the language you want the promotion
     *         information to be displayed in. The language code is to be specified in the ISO 639-1
     *         format. Choices are 'EN', 'ES', 'FR', 'IT', 'PT', 'ZH', 'AR', 'HI', 'HT', 'JA' and
     *         'DE'. Default is 'EN'. This is a case-insensitive field. The promotion information is
     *         returned in your requested language irrespective of the original language in which
     *         the promotion was launched.
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> reloadlyAirtimePromotionsAsync(
            final String accept,
            final String authorization,
            final Integer size,
            final Integer page,
            final Integer languageCode) {
        return makeHttpCallAsync(() -> buildReloadlyAirtimePromotionsRequest(accept, authorization,
                size, page, languageCode),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleReloadlyAirtimePromotionsResponse(context));
    }

    /**
     * Builds the HttpRequest object for reloadlyAirtimePromotions.
     */
    private HttpRequest buildReloadlyAirtimePromotionsRequest(
            final String accept,
            final String authorization,
            final Integer size,
            final Integer page,
            final Integer languageCode) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.AIRTIME);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/promotions");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("size", size);
        queryParameters.put("page", page);
        queryParameters.put("languageCode", languageCode);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("Authorization", authorization);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for reloadlyAirtimePromotions.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleReloadlyAirtimePromotionsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Full authentication is required to access this resource",
                    context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  promotionid  Required parameter: The promotion's identification number.
     * @param  languageCode  Optional parameter: This indicates the language you want the promotion
     *         information to be displayed in. The language code is to be specified in the ISO 639-1
     *         format. Choices are 'EN', 'ES', 'FR', 'IT', 'PT', 'ZH', 'AR', 'HI', 'HT', 'JA' and
     *         'DE'. Default is 'EN'. This is a case-insensitive field. The promotion information is
     *         returned in your requested language irrespective of the original language in which
     *         the promotion was launched.
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse reloadlyAirtimePromotionById(
            final String accept,
            final String authorization,
            final String promotionid,
            final String languageCode) throws ApiException, IOException {
        HttpRequest request = buildReloadlyAirtimePromotionByIdRequest(accept, authorization,
                promotionid, languageCode);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleReloadlyAirtimePromotionByIdResponse(context);
    }

    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  promotionid  Required parameter: The promotion's identification number.
     * @param  languageCode  Optional parameter: This indicates the language you want the promotion
     *         information to be displayed in. The language code is to be specified in the ISO 639-1
     *         format. Choices are 'EN', 'ES', 'FR', 'IT', 'PT', 'ZH', 'AR', 'HI', 'HT', 'JA' and
     *         'DE'. Default is 'EN'. This is a case-insensitive field. The promotion information is
     *         returned in your requested language irrespective of the original language in which
     *         the promotion was launched.
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> reloadlyAirtimePromotionByIdAsync(
            final String accept,
            final String authorization,
            final String promotionid,
            final String languageCode) {
        return makeHttpCallAsync(() -> buildReloadlyAirtimePromotionByIdRequest(accept,
                authorization, promotionid, languageCode),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleReloadlyAirtimePromotionByIdResponse(context));
    }

    /**
     * Builds the HttpRequest object for reloadlyAirtimePromotionById.
     */
    private HttpRequest buildReloadlyAirtimePromotionByIdRequest(
            final String accept,
            final String authorization,
            final String promotionid,
            final String languageCode) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.AIRTIME);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/promotions/{promotionid}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("promotionid",
                new SimpleEntry<Object, Boolean>(promotionid, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("languageCode", languageCode);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("Authorization", authorization);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for reloadlyAirtimePromotionById.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleReloadlyAirtimePromotionByIdResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Full authentication is required to access this resource",
                    context);
        }
        if (responseCode == 404) {
            throw new ApiException("Promotion not found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  countrycode  Required parameter: Example:
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse reloadlyAirtimePromotionByIso(
            final String accept,
            final String authorization,
            final String countrycode) throws ApiException, IOException {
        HttpRequest request = buildReloadlyAirtimePromotionByIsoRequest(accept, authorization,
                countrycode);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleReloadlyAirtimePromotionByIsoResponse(context);
    }

    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  countrycode  Required parameter: Example:
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> reloadlyAirtimePromotionByIsoAsync(
            final String accept,
            final String authorization,
            final String countrycode) {
        return makeHttpCallAsync(() -> buildReloadlyAirtimePromotionByIsoRequest(accept,
                authorization, countrycode),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleReloadlyAirtimePromotionByIsoResponse(context));
    }

    /**
     * Builds the HttpRequest object for reloadlyAirtimePromotionByIso.
     */
    private HttpRequest buildReloadlyAirtimePromotionByIsoRequest(
            final String accept,
            final String authorization,
            final String countrycode) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.AIRTIME);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/promotions/country-codes/{countrycode}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("countrycode",
                new SimpleEntry<Object, Boolean>(countrycode, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("Authorization", authorization);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for reloadlyAirtimePromotionByIso.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleReloadlyAirtimePromotionByIsoResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Full authentication is required to access this resource",
                    context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  operatorid  Required parameter: Example:
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse reloadlyAirtimePromotionByOperatorId(
            final String accept,
            final String authorization,
            final String operatorid) throws ApiException, IOException {
        HttpRequest request = buildReloadlyAirtimePromotionByOperatorIdRequest(accept,
                authorization, operatorid);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleReloadlyAirtimePromotionByOperatorIdResponse(context);
    }

    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  operatorid  Required parameter: Example:
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> reloadlyAirtimePromotionByOperatorIdAsync(
            final String accept,
            final String authorization,
            final String operatorid) {
        return makeHttpCallAsync(() -> buildReloadlyAirtimePromotionByOperatorIdRequest(accept,
                authorization, operatorid),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleReloadlyAirtimePromotionByOperatorIdResponse(context));
    }

    /**
     * Builds the HttpRequest object for reloadlyAirtimePromotionByOperatorId.
     */
    private HttpRequest buildReloadlyAirtimePromotionByOperatorIdRequest(
            final String accept,
            final String authorization,
            final String operatorid) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.AIRTIME);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/promotions/operators/{operatorid}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("Authorization",
                new SimpleEntry<Object, Boolean>(authorization, true));
        templateParameters.put("operatorid",
                new SimpleEntry<Object, Boolean>(operatorid, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for reloadlyAirtimePromotionByOperatorId.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleReloadlyAirtimePromotionByOperatorIdResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Full authentication is required to access this resource",
                    context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

}