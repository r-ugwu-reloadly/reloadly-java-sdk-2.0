/*
 * ReloadlySdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.reloadly.auth.controllers;

import com.reloadly.auth.ApiHelper;
import com.reloadly.auth.AuthManager;
import com.reloadly.auth.Configuration;
import com.reloadly.auth.Server;
import com.reloadly.auth.exceptions.ApiException;
import com.reloadly.auth.http.Headers;
import com.reloadly.auth.http.client.HttpClient;
import com.reloadly.auth.http.client.HttpContext;
import com.reloadly.auth.http.request.HttpRequest;
import com.reloadly.auth.http.response.HttpResponse;
import com.reloadly.auth.http.response.HttpStringResponse;
import com.reloadly.auth.models.DynamicResponse;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class GiftCardsProductsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public GiftCardsProductsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  includeRange  Optional parameter: Indicates the list of gift card products with the
     *         denominationType property specified as RANGE are to be retrieved.
     * @param  includeFixed  Optional parameter: Indicates the list of gift card products with the
     *         denominationType property specified as FIXED are to be retrieved.
     * @param  size  Optional parameter: This indicates the number of gift card products to be
     *         retrieved on a page.
     * @param  page  Optional parameter: This indicates the page of the product list being
     *         retrieved.
     * @param  productName  Optional parameter: Indicates the name of the gift card product.
     * @param  countryCode  Optional parameter: Indicates the ISO code of the country whose gift
     *         card products are to be retrieved.
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse reloadlyGiftCardsProducts(
            final String accept,
            final String authorization,
            final Boolean includeRange,
            final Boolean includeFixed,
            final Integer size,
            final String page,
            final String productName,
            final String countryCode) throws ApiException, IOException {
        HttpRequest request = buildReloadlyGiftCardsProductsRequest(accept, authorization,
                includeRange, includeFixed, size, page, productName, countryCode);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleReloadlyGiftCardsProductsResponse(context);
    }

    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  includeRange  Optional parameter: Indicates the list of gift card products with the
     *         denominationType property specified as RANGE are to be retrieved.
     * @param  includeFixed  Optional parameter: Indicates the list of gift card products with the
     *         denominationType property specified as FIXED are to be retrieved.
     * @param  size  Optional parameter: This indicates the number of gift card products to be
     *         retrieved on a page.
     * @param  page  Optional parameter: This indicates the page of the product list being
     *         retrieved.
     * @param  productName  Optional parameter: Indicates the name of the gift card product.
     * @param  countryCode  Optional parameter: Indicates the ISO code of the country whose gift
     *         card products are to be retrieved.
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> reloadlyGiftCardsProductsAsync(
            final String accept,
            final String authorization,
            final Boolean includeRange,
            final Boolean includeFixed,
            final Integer size,
            final String page,
            final String productName,
            final String countryCode) {
        return makeHttpCallAsync(() -> buildReloadlyGiftCardsProductsRequest(accept, authorization,
                includeRange, includeFixed, size, page, productName, countryCode),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleReloadlyGiftCardsProductsResponse(context));
    }

    /**
     * Builds the HttpRequest object for reloadlyGiftCardsProducts.
     */
    private HttpRequest buildReloadlyGiftCardsProductsRequest(
            final String accept,
            final String authorization,
            final Boolean includeRange,
            final Boolean includeFixed,
            final Integer size,
            final String page,
            final String productName,
            final String countryCode) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.GIFT_CARDS);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/products");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("includeRange", includeRange);
        queryParameters.put("includeFixed", includeFixed);
        queryParameters.put("size", size);
        queryParameters.put("page", page);
        queryParameters.put("productName", productName);
        queryParameters.put("countryCode", countryCode);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("Authorization", authorization);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for reloadlyGiftCardsProducts.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleReloadlyGiftCardsProductsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Full authentication is required to access this resource",
                    context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  productid  Required parameter: The product's identification number.
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse reloadlyGiftCardsProductById(
            final String accept,
            final String authorization,
            final int productid) throws ApiException, IOException {
        HttpRequest request = buildReloadlyGiftCardsProductByIdRequest(accept, authorization,
                productid);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleReloadlyGiftCardsProductByIdResponse(context);
    }

    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  productid  Required parameter: The product's identification number.
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> reloadlyGiftCardsProductByIdAsync(
            final String accept,
            final String authorization,
            final int productid) {
        return makeHttpCallAsync(() -> buildReloadlyGiftCardsProductByIdRequest(accept,
                authorization, productid),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleReloadlyGiftCardsProductByIdResponse(context));
    }

    /**
     * Builds the HttpRequest object for reloadlyGiftCardsProductById.
     */
    private HttpRequest buildReloadlyGiftCardsProductByIdRequest(
            final String accept,
            final String authorization,
            final int productid) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.GIFT_CARDS);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/products/{productid}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("productid",
                new SimpleEntry<Object, Boolean>(productid, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("Authorization", authorization);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for reloadlyGiftCardsProductById.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleReloadlyGiftCardsProductByIdResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException(
                    "The product was either not found or is no longer available, Please contact support",
                    context);
        }
        if (responseCode == 401) {
            throw new ApiException("Full authentication is required to access this resource",
                    context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  countrycode  Required parameter: The ISO code of the country you want to display
     *         available gift cards for.
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse reloadlyGiftCardsProductByIso(
            final String accept,
            final String authorization,
            final String countrycode) throws ApiException, IOException {
        HttpRequest request = buildReloadlyGiftCardsProductByIsoRequest(accept, authorization,
                countrycode);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleReloadlyGiftCardsProductByIsoResponse(context);
    }

    /**
     * @param  accept  Required parameter: Example:
     * @param  authorization  Required parameter: Example:
     * @param  countrycode  Required parameter: The ISO code of the country you want to display
     *         available gift cards for.
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> reloadlyGiftCardsProductByIsoAsync(
            final String accept,
            final String authorization,
            final String countrycode) {
        return makeHttpCallAsync(() -> buildReloadlyGiftCardsProductByIsoRequest(accept,
                authorization, countrycode),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleReloadlyGiftCardsProductByIsoResponse(context));
    }

    /**
     * Builds the HttpRequest object for reloadlyGiftCardsProductByIso.
     */
    private HttpRequest buildReloadlyGiftCardsProductByIsoRequest(
            final String accept,
            final String authorization,
            final String countrycode) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.GIFT_CARDS);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/countries/{countrycode}/products");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("countrycode",
                new SimpleEntry<Object, Boolean>(countrycode, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("Authorization", authorization);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for reloadlyGiftCardsProductByIso.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleReloadlyGiftCardsProductByIsoResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Full authentication is required to access this resource",
                    context);
        }
        if (responseCode == 404) {
            throw new ApiException("Country not found and/or not currently supported", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

}