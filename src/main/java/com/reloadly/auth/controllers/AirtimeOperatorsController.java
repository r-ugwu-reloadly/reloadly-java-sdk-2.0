/*
 * ReloadlySdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.reloadly.auth.controllers;

import com.reloadly.auth.ApiHelper;
import com.reloadly.auth.AuthManager;
import com.reloadly.auth.Configuration;
import com.reloadly.auth.Server;
import com.reloadly.auth.exceptions.ApiException;
import com.reloadly.auth.http.Headers;
import com.reloadly.auth.http.client.HttpClient;
import com.reloadly.auth.http.client.HttpContext;
import com.reloadly.auth.http.request.HttpRequest;
import com.reloadly.auth.http.response.HttpResponse;
import com.reloadly.auth.http.response.HttpStringResponse;
import com.reloadly.auth.models.DynamicResponse;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class AirtimeOperatorsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public AirtimeOperatorsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * @param  accept  Required parameter: Example: application/com.reloadly.topups-v1+json
     * @param  authorization  Required parameter: Example:
     * @param  includeBundles  Optional parameter: Indicates if any airtime and data bundles being
     *         offered by the operator should be included in the API response. Default value is
     *         true.
     * @param  includeData  Optional parameter: Indicates if any airtime or data plans being offered
     *         by the operator should be included in the API response. Default value is true.
     * @param  suggestedAmountsMap  Optional parameter: Indicates if this field should be returned
     *         as a response. Default value is false.
     * @param  size  Optional parameter: This indicates the number of operators to be retrieved on a
     *         page. Default value is 200.
     * @param  page  Optional parameter: This indicates the page of the operator list being
     *         retrieved. Default value is 1.
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse reloadlyAirtimeOperators(
            final String accept,
            final String authorization,
            final String includeBundles,
            final String includeData,
            final String suggestedAmountsMap,
            final String size,
            final String page) throws ApiException, IOException {
        HttpRequest request = buildReloadlyAirtimeOperatorsRequest(accept, authorization,
                includeBundles, includeData, suggestedAmountsMap, size, page);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleReloadlyAirtimeOperatorsResponse(context);
    }

    /**
     * @param  accept  Required parameter: Example: application/com.reloadly.topups-v1+json
     * @param  authorization  Required parameter: Example:
     * @param  includeBundles  Optional parameter: Indicates if any airtime and data bundles being
     *         offered by the operator should be included in the API response. Default value is
     *         true.
     * @param  includeData  Optional parameter: Indicates if any airtime or data plans being offered
     *         by the operator should be included in the API response. Default value is true.
     * @param  suggestedAmountsMap  Optional parameter: Indicates if this field should be returned
     *         as a response. Default value is false.
     * @param  size  Optional parameter: This indicates the number of operators to be retrieved on a
     *         page. Default value is 200.
     * @param  page  Optional parameter: This indicates the page of the operator list being
     *         retrieved. Default value is 1.
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> reloadlyAirtimeOperatorsAsync(
            final String accept,
            final String authorization,
            final String includeBundles,
            final String includeData,
            final String suggestedAmountsMap,
            final String size,
            final String page) {
        return makeHttpCallAsync(() -> buildReloadlyAirtimeOperatorsRequest(accept, authorization,
                includeBundles, includeData, suggestedAmountsMap, size, page),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleReloadlyAirtimeOperatorsResponse(context));
    }

    /**
     * Builds the HttpRequest object for reloadlyAirtimeOperators.
     */
    private HttpRequest buildReloadlyAirtimeOperatorsRequest(
            final String accept,
            final String authorization,
            final String includeBundles,
            final String includeData,
            final String suggestedAmountsMap,
            final String size,
            final String page) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.AIRTIME);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/operators");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("includeBundles", includeBundles);
        queryParameters.put("includeData", includeData);
        queryParameters.put("suggestedAmountsMap", suggestedAmountsMap);
        queryParameters.put("size", size);
        queryParameters.put("page", page);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("Authorization", authorization);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for reloadlyAirtimeOperators.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleReloadlyAirtimeOperatorsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Full authentication is required to access this resource",
                    context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

    /**
     * @param  accept  Required parameter: Example: application/com.reloadly.topups-v1+json
     * @param  authorization  Required parameter: Example:
     * @param  phone  Required parameter: The mobile number whose details are to be retrieved.
     * @param  countryisocode  Required parameter: The ISO code of the country where the mobile
     *         number is registered.
     * @param  countrycode  Required parameter: Example:
     * @param  suggestedAmounts  Optional parameter: Indicates if this field should be returned as a
     *         response. Default value is false.
     * @param  suggestedAmountsMap  Optional parameter: Indicates if this field should be returned
     *         as a response. Default value is false.
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse reloadlyAirtimeOperatorAutodetect(
            final String accept,
            final String authorization,
            final String phone,
            final String countryisocode,
            final String countrycode,
            final Boolean suggestedAmounts,
            final Boolean suggestedAmountsMap) throws ApiException, IOException {
        HttpRequest request = buildReloadlyAirtimeOperatorAutodetectRequest(accept, authorization,
                phone, countryisocode, countrycode, suggestedAmounts, suggestedAmountsMap);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleReloadlyAirtimeOperatorAutodetectResponse(context);
    }

    /**
     * @param  accept  Required parameter: Example: application/com.reloadly.topups-v1+json
     * @param  authorization  Required parameter: Example:
     * @param  phone  Required parameter: The mobile number whose details are to be retrieved.
     * @param  countryisocode  Required parameter: The ISO code of the country where the mobile
     *         number is registered.
     * @param  countrycode  Required parameter: Example:
     * @param  suggestedAmounts  Optional parameter: Indicates if this field should be returned as a
     *         response. Default value is false.
     * @param  suggestedAmountsMap  Optional parameter: Indicates if this field should be returned
     *         as a response. Default value is false.
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> reloadlyAirtimeOperatorAutodetectAsync(
            final String accept,
            final String authorization,
            final String phone,
            final String countryisocode,
            final String countrycode,
            final Boolean suggestedAmounts,
            final Boolean suggestedAmountsMap) {
        return makeHttpCallAsync(() -> buildReloadlyAirtimeOperatorAutodetectRequest(accept,
                authorization, phone, countryisocode, countrycode, suggestedAmounts,
                suggestedAmountsMap),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleReloadlyAirtimeOperatorAutodetectResponse(context));
    }

    /**
     * Builds the HttpRequest object for reloadlyAirtimeOperatorAutodetect.
     */
    private HttpRequest buildReloadlyAirtimeOperatorAutodetectRequest(
            final String accept,
            final String authorization,
            final String phone,
            final String countryisocode,
            final String countrycode,
            final Boolean suggestedAmounts,
            final Boolean suggestedAmountsMap) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.AIRTIME);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/operators/auto-detect/phone/{phone}/countries/{countrycode}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("phone",
                new SimpleEntry<Object, Boolean>(phone, true));
        templateParameters.put("countryisocode",
                new SimpleEntry<Object, Boolean>(countryisocode, true));
        templateParameters.put("countrycode",
                new SimpleEntry<Object, Boolean>(countrycode, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("suggestedAmounts", suggestedAmounts);
        queryParameters.put("suggestedAmountsMap", suggestedAmountsMap);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("Authorization", authorization);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for reloadlyAirtimeOperatorAutodetect.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleReloadlyAirtimeOperatorAutodetectResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Full authentication is required to access this resource",
                    context);
        }
        if (responseCode == 404) {
            throw new ApiException(
                    "Country code must be 2 characters ISO-Alpha-2 country code. See https://www.iban.com/country-codes",
                    context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

    /**
     * @param  accept  Required parameter: Example: application/com.reloadly.topups-v1+json
     * @param  authorization  Required parameter: Example:
     * @param  operatorid  Required parameter: The operator's identification number.
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse reloadlyAirtimeOperatorById(
            final String accept,
            final String authorization,
            final String operatorid) throws ApiException, IOException {
        HttpRequest request = buildReloadlyAirtimeOperatorByIdRequest(accept, authorization,
                operatorid);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleReloadlyAirtimeOperatorByIdResponse(context);
    }

    /**
     * @param  accept  Required parameter: Example: application/com.reloadly.topups-v1+json
     * @param  authorization  Required parameter: Example:
     * @param  operatorid  Required parameter: The operator's identification number.
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> reloadlyAirtimeOperatorByIdAsync(
            final String accept,
            final String authorization,
            final String operatorid) {
        return makeHttpCallAsync(() -> buildReloadlyAirtimeOperatorByIdRequest(accept,
                authorization, operatorid),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleReloadlyAirtimeOperatorByIdResponse(context));
    }

    /**
     * Builds the HttpRequest object for reloadlyAirtimeOperatorById.
     */
    private HttpRequest buildReloadlyAirtimeOperatorByIdRequest(
            final String accept,
            final String authorization,
            final String operatorid) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.AIRTIME);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/operators/{operatorid}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("operatorid",
                new SimpleEntry<Object, Boolean>(operatorid, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("Authorization", authorization);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for reloadlyAirtimeOperatorById.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleReloadlyAirtimeOperatorByIdResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Full authentication is required to access this resource",
                    context);
        }
        if (responseCode == 404) {
            throw new ApiException("Operator not found for given id", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

    /**
     * @param  accept  Required parameter: Example: application/com.reloadly.topups-v1+json
     * @param  authorization  Required parameter: Example:
     * @param  countrycode  Required parameter: The ISO code of the country where the operator is
     *         registered.
     * @param  includeBundles  Required parameter: Indicates if any airtime and data bundles being
     *         offered by the operator should be returned as a response. Default value is true.
     * @param  suggestedAmountsMap  Optional parameter: Indicates if this field should be returned
     *         as a response. Default value is false.
     * @param  suggestedAmounts  Optional parameter: Indicates if this field should be returned as a
     *         response. Default value is false.
     * @param  includePin  Optional parameter: Indicates if PIN details if applicable to the
     *         operator, should be returned as a response. Default value is true.
     * @param  includeData  Optional parameter: Indicates if any data plans being offered by the
     *         operator should be returned as a response. Default value is true.
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse reloadlyAirtimeOperatorByIso(
            final String accept,
            final String authorization,
            final String countrycode,
            final boolean includeBundles,
            final Boolean suggestedAmountsMap,
            final String suggestedAmounts,
            final Boolean includePin,
            final Boolean includeData) throws ApiException, IOException {
        HttpRequest request = buildReloadlyAirtimeOperatorByIsoRequest(accept, authorization,
                countrycode, includeBundles, suggestedAmountsMap, suggestedAmounts, includePin,
                includeData);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleReloadlyAirtimeOperatorByIsoResponse(context);
    }

    /**
     * @param  accept  Required parameter: Example: application/com.reloadly.topups-v1+json
     * @param  authorization  Required parameter: Example:
     * @param  countrycode  Required parameter: The ISO code of the country where the operator is
     *         registered.
     * @param  includeBundles  Required parameter: Indicates if any airtime and data bundles being
     *         offered by the operator should be returned as a response. Default value is true.
     * @param  suggestedAmountsMap  Optional parameter: Indicates if this field should be returned
     *         as a response. Default value is false.
     * @param  suggestedAmounts  Optional parameter: Indicates if this field should be returned as a
     *         response. Default value is false.
     * @param  includePin  Optional parameter: Indicates if PIN details if applicable to the
     *         operator, should be returned as a response. Default value is true.
     * @param  includeData  Optional parameter: Indicates if any data plans being offered by the
     *         operator should be returned as a response. Default value is true.
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> reloadlyAirtimeOperatorByIsoAsync(
            final String accept,
            final String authorization,
            final String countrycode,
            final boolean includeBundles,
            final Boolean suggestedAmountsMap,
            final String suggestedAmounts,
            final Boolean includePin,
            final Boolean includeData) {
        return makeHttpCallAsync(() -> buildReloadlyAirtimeOperatorByIsoRequest(accept,
                authorization, countrycode, includeBundles, suggestedAmountsMap, suggestedAmounts,
                includePin, includeData),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleReloadlyAirtimeOperatorByIsoResponse(context));
    }

    /**
     * Builds the HttpRequest object for reloadlyAirtimeOperatorByIso.
     */
    private HttpRequest buildReloadlyAirtimeOperatorByIsoRequest(
            final String accept,
            final String authorization,
            final String countrycode,
            final boolean includeBundles,
            final Boolean suggestedAmountsMap,
            final String suggestedAmounts,
            final Boolean includePin,
            final Boolean includeData) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.AIRTIME);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/operators/countries/{countrycode}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("countrycode",
                new SimpleEntry<Object, Boolean>(countrycode, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("Authorization", authorization);
        queryParameters.put("includeBundles", includeBundles);
        queryParameters.put("suggestedAmountsMap", suggestedAmountsMap);
        queryParameters.put("suggestedAmounts", suggestedAmounts);
        queryParameters.put("includePin", includePin);
        queryParameters.put("includeData", includeData);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Accept", accept);
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for reloadlyAirtimeOperatorByIso.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleReloadlyAirtimeOperatorByIsoResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Full authentication is required to access this resource",
                    context);
        }
        if (responseCode == 404) {
            throw new ApiException("Country not found and/or not currently supported", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

}